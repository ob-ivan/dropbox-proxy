/**
 * Use this file as an example to create your own config.json.
 *
 * You cannot use this file directly as it contains comments which are not
 * part of valid JSON. Also it is versioned and you probably do not want
 * to see it as modified each time you type `git status`.
 *
 * Replace words in upper case with appropriate values.
**/
{
    // DROPBOX //

    /**
     * Your application credentials. If you don't know what it is, go to
     * https://www.dropbox.com/developers/apps and create an application,
     * then insert values here.
     *
     * Required.
    **/
    "dropbox.app_info.json"     : {
        "key"       : "APP_KEY",
        "secret"    : "APP_SECRET"
    },

    /**
     * Your application self-proclaimed name and version.
     * Dropbox Client object uses it to construct User-Agent string.
     *
     * Required.
    **/
    "dropbox.client_identifier" : "APP_NAME/APP_VERSION",

    /**
     * Authorization code is a string identifier which Dropbox site provides
     * you the moment you grant your app unlimited access to your folder by
     * clicking 'Accept' button on their site.
     *
     * Ideally you should use it just once, to obtain access token.
     * Once you have access token stored in config file, auth_code is never
     * used again.
     *
     * Actually it won't work again, as Dropbox purges it as soon as it
     * returns access token.
     *
     * Required only as a part of setup.
    **/
    "dropbox.auth_code"         : "AUTH_CODE",

    /**
     * Access token is a string identifying a dropbox user (usually you)
     * who gave permission to your app to access their dropbox folder.
     *
     * Optional for your initial setup, but required to make actual work.
    **/
    "dropbox.access_token"      : "ACCESS_TOKEN",

    // CACHE //

    /**
     * Caching driver.
     *
     * Available options:
     *  "memory"
     *  "memcache"
     *  "files"     not implemented
     *  "db"        not implemented
     *
     * Defaults to 'memory' which does not store values between application runs
     * and is a poor guess for communicating with dropbox API.
     *
     * Memcache is the recommended solution.
     *
     * You can also opt to implement "files", or "db", or any driver you fancy.
    **/
    "cache.driver" : "memory",

    /**
     * Namespace is a string that will be prefixed to each key in the cache storage
     * to keep sure there are no collision with any other applications using
     * the same storage.
     *
     * Defaults to empty string, but the same template as in
     * "dropbox.client_identifier" is recommended.
    **/
    "cache.namespace" : "APP_NAME/APP_VERSION",

    /**
     * Memcache connection parameters.
     *
     * If "unix_socket" is present it is preferred over "host" and "port" params.
    **/
    "cache.memcache.unix_socket"    : "PATH_TO_MEMCACHE_SOCKET",
    "cache.memcache.host"           : "MEMCACHE_HOST",
    "cache.memcache.port"           : "MEMCACHE_PORT",
}
